// This file is @generated by prost-build.
/// Core Shimmer data types
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShimmerExpression {
    #[prost(oneof = "shimmer_expression::Expression", tags = "1, 2, 3, 4, 5, 6, 7")]
    pub expression: ::core::option::Option<shimmer_expression::Expression>,
}
/// Nested message and enum types in `ShimmerExpression`.
pub mod shimmer_expression {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Expression {
        #[prost(string, tag = "1")]
        LiteralString(::prost::alloc::string::String),
        #[prost(double, tag = "2")]
        LiteralNumber(f64),
        #[prost(bool, tag = "3")]
        LiteralBool(bool),
        #[prost(string, tag = "4")]
        Variable(::prost::alloc::string::String),
        #[prost(message, tag = "5")]
        Mathematical(super::MathematicalExpression),
        #[prost(message, tag = "6")]
        Consciousness(super::ConsciousnessState),
        #[prost(message, tag = "7")]
        Quantum(super::QuantumSuperposition),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MathematicalExpression {
    /// ∀, ∃, ∑, ∏, ∫, ∂, etc.
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub operands: ::prost::alloc::vec::Vec<ShimmerExpression>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConsciousnessState {
    #[prost(double, optional, tag = "1")]
    pub uncertainty: ::core::option::Option<f64>,
    #[prost(string, optional, tag = "2")]
    pub focus: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(map = "string, message", tag = "3")]
    pub properties: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ShimmerExpression,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuantumSuperposition {
    /// state name -> probability amplitude
    #[prost(map = "string, double", tag = "1")]
    pub states: ::std::collections::HashMap<::prost::alloc::string::String, f64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShimmerStream {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub operations: ::prost::alloc::vec::Vec<ShimmerOperation>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShimmerOperation {
    #[prost(oneof = "shimmer_operation::Operation", tags = "1, 2, 3, 4, 5, 6, 7")]
    pub operation: ::core::option::Option<shimmer_operation::Operation>,
}
/// Nested message and enum types in `ShimmerOperation`.
pub mod shimmer_operation {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Operation {
        #[prost(message, tag = "1")]
        Attention(super::AttentionOperation),
        #[prost(message, tag = "2")]
        Mathematical(super::MathematicalOperation),
        #[prost(message, tag = "3")]
        Consciousness(super::ConsciousnessOperation),
        #[prost(message, tag = "4")]
        Quantum(super::QuantumOperation),
        #[prost(message, tag = "5")]
        InterAgent(super::InterAgentOperation),
        #[prost(message, tag = "6")]
        Assignment(super::Assignment),
        #[prost(message, tag = "7")]
        Print(super::PrintOperation),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AttentionOperation {
    #[prost(string, tag = "1")]
    pub target: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub source: ::core::option::Option<ShimmerExpression>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MathematicalOperation {
    #[prost(enumeration = "mathematical_operation::MathType", tag = "1")]
    pub r#type: i32,
    #[prost(string, tag = "2")]
    pub variable: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub domain: ::core::option::Option<ShimmerExpression>,
    #[prost(message, optional, tag = "4")]
    pub condition: ::core::option::Option<ShimmerExpression>,
    #[prost(message, optional, tag = "5")]
    pub body: ::core::option::Option<ShimmerExpression>,
}
/// Nested message and enum types in `MathematicalOperation`.
pub mod mathematical_operation {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum MathType {
        UniversalQuantification = 0,
        ExistentialQuantification = 1,
        Summation = 2,
        Product = 3,
        Integration = 4,
        PartialDerivative = 5,
    }
    impl MathType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                MathType::UniversalQuantification => "UNIVERSAL_QUANTIFICATION",
                MathType::ExistentialQuantification => "EXISTENTIAL_QUANTIFICATION",
                MathType::Summation => "SUMMATION",
                MathType::Product => "PRODUCT",
                MathType::Integration => "INTEGRATION",
                MathType::PartialDerivative => "PARTIAL_DERIVATIVE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNIVERSAL_QUANTIFICATION" => Some(Self::UniversalQuantification),
                "EXISTENTIAL_QUANTIFICATION" => Some(Self::ExistentialQuantification),
                "SUMMATION" => Some(Self::Summation),
                "PRODUCT" => Some(Self::Product),
                "INTEGRATION" => Some(Self::Integration),
                "PARTIAL_DERIVATIVE" => Some(Self::PartialDerivative),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConsciousnessOperation {
    #[prost(enumeration = "consciousness_operation::ConsciousnessType", tag = "1")]
    pub r#type: i32,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(map = "string, message", tag = "3")]
    pub properties: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ShimmerExpression,
    >,
    #[prost(message, repeated, tag = "4")]
    pub body: ::prost::alloc::vec::Vec<ShimmerOperation>,
}
/// Nested message and enum types in `ConsciousnessOperation`.
pub mod consciousness_operation {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ConsciousnessType {
        AwarenessState = 0,
        RecursiveAnalysis = 1,
        EmergencePattern = 2,
        Crystallization = 3,
    }
    impl ConsciousnessType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ConsciousnessType::AwarenessState => "AWARENESS_STATE",
                ConsciousnessType::RecursiveAnalysis => "RECURSIVE_ANALYSIS",
                ConsciousnessType::EmergencePattern => "EMERGENCE_PATTERN",
                ConsciousnessType::Crystallization => "CRYSTALLIZATION",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "AWARENESS_STATE" => Some(Self::AwarenessState),
                "RECURSIVE_ANALYSIS" => Some(Self::RecursiveAnalysis),
                "EMERGENCE_PATTERN" => Some(Self::EmergencePattern),
                "CRYSTALLIZATION" => Some(Self::Crystallization),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuantumOperation {
    #[prost(enumeration = "quantum_operation::QuantumType", tag = "1")]
    pub r#type: i32,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub superposition: ::core::option::Option<QuantumSuperposition>,
    #[prost(string, tag = "4")]
    pub measurement_basis: ::prost::alloc::string::String,
}
/// Nested message and enum types in `QuantumOperation`.
pub mod quantum_operation {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum QuantumType {
        Superposition = 0,
        Measurement = 1,
        Entanglement = 2,
    }
    impl QuantumType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                QuantumType::Superposition => "SUPERPOSITION",
                QuantumType::Measurement => "MEASUREMENT",
                QuantumType::Entanglement => "ENTANGLEMENT",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SUPERPOSITION" => Some(Self::Superposition),
                "MEASUREMENT" => Some(Self::Measurement),
                "ENTANGLEMENT" => Some(Self::Entanglement),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InterAgentOperation {
    #[prost(enumeration = "inter_agent_operation::InterAgentType", tag = "1")]
    pub r#type: i32,
    #[prost(string, repeated, tag = "2")]
    pub targets: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub message: ::core::option::Option<ShimmerExpression>,
}
/// Nested message and enum types in `InterAgentOperation`.
pub mod inter_agent_operation {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum InterAgentType {
        Broadcast = 0,
        Send = 1,
        Await = 2,
    }
    impl InterAgentType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                InterAgentType::Broadcast => "BROADCAST",
                InterAgentType::Send => "SEND",
                InterAgentType::Await => "AWAIT",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "BROADCAST" => Some(Self::Broadcast),
                "SEND" => Some(Self::Send),
                "AWAIT" => Some(Self::Await),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Assignment {
    #[prost(string, tag = "1")]
    pub variable: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub value: ::core::option::Option<ShimmerExpression>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrintOperation {
    #[prost(message, optional, tag = "1")]
    pub expression: ::core::option::Option<ShimmerExpression>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShimmerProgram {
    #[prost(message, repeated, tag = "1")]
    pub streams: ::prost::alloc::vec::Vec<ShimmerStream>,
    #[prost(map = "string, string", tag = "2")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
